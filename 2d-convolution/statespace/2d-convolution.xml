<project name="2d-convolution" root-directory="/home/sur096/projects/projects_in_kaira/2d-convolution" target_env="C++"><configuration><parameter default="24" description="Width of matrix" name="width" policy="mandatory" type="unsigned int" /><parameter default="24" description="height of matrix" name="height" policy="mandatory" type="unsigned int" /><parameter default="1" description="divide in along x axes" name="divide_x" policy="mandatory" type="int" /><parameter default="1" description="divide along y axes" name="divide_y" policy="mandatory" type="int" /><build-option name="CC">g++</build-option><build-option name="LIBS" /><build-option name="CFLAGS">-O2</build-option><head-code>#include &lt;matrix.h&gt;

namespace ca {

	std::string token_name(const Matrix&lt;float&gt; &amp;m) {
		return "matrix";
	}
	
	void pack(Packer &amp;packer, Matrix&lt;float&gt; &amp;m) {
		pack(packer, m.get_size_of_serialized_data());
		pack(packer, m.serialize(), m.get_size_of_serialized_data());
		printf("pack: %d\n", m.get_size_of_serialized_data());
	}
	
	template&lt;&gt; Matrix&lt;float&gt; unpack(Unpacker &amp;unpacker) {
		unsigned int size_of_data = unpack&lt;unsigned int&gt;(unpacker);
		printf("unpack: %d\n", size_of_data);
		char *mem = (char *) unpack(unpacker, size_of_data);
		Matrix&lt;float&gt; matrix;
		matrix.deserialize(mem);
		return matrix;
	}
}</head-code></configuration><description>&lt;project target_env="C++"&gt;&lt;configuration&gt;&lt;parameter default="24" description="Width of matrix" name="width" policy="mandatory" type="unsigned int" /&gt;&lt;parameter default="24" description="height of matrix" name="height" policy="mandatory" type="unsigned int" /&gt;&lt;parameter default="1" description="divide in along x axes" name="divide_x" policy="mandatory" type="int" /&gt;&lt;parameter default="1" description="divide along y axes" name="divide_y" policy="mandatory" type="int" /&gt;&lt;build-option name="CC"&gt;g++&lt;/build-option&gt;&lt;build-option name="LIBS" /&gt;&lt;build-option name="CFLAGS"&gt;-O2&lt;/build-option&gt;&lt;head-code&gt;#include &amp;lt;matrix.h&amp;gt;

namespace ca {

	std::string token_name(const Matrix&amp;lt;float&amp;gt; &amp;amp;m) {
		return "matrix";
	}
	
	void pack(Packer &amp;amp;packer, Matrix&amp;lt;float&amp;gt; &amp;amp;m) {
		pack(packer, m.get_size_of_serialized_data());
		pack(packer, m.serialize(), m.get_size_of_serialized_data());
		printf("pack: %d\n", m.get_size_of_serialized_data());
	}
	
	template&amp;lt;&amp;gt; Matrix&amp;lt;float&amp;gt; unpack(Unpacker &amp;amp;unpacker) {
		unsigned int size_of_data = unpack&amp;lt;unsigned int&amp;gt;(unpacker);
		printf("unpack: %d\n", size_of_data);
		char *mem = (char *) unpack(unpacker, size_of_data);
		Matrix&amp;lt;float&amp;gt; matrix;
		matrix.deserialize(mem);
		return matrix;
	}
}&lt;/head-code&gt;&lt;/configuration&gt;&lt;net id="101" name="Main" net-type="main"&gt;&lt;edge from_item="102" id="105" inscription="matrix" inscription_x="-410.85836109" inscription_y="-224.776124828" to_item="104" /&gt;&lt;edge from_item="104" id="108" inscription="[bulk, multicast] block @ targets" inscription_x="-206.038884585" inscription_y="-222.564048094" to_item="107" /&gt;&lt;edge bidirectional="true" from_item="109" id="114" inscription="mask" inscription_x="-356.410977678" inscription_y="-84.4351921717" to_item="104"&gt;&lt;point x="-331" y="-69" /&gt;&lt;/edge&gt;&lt;place id="102" init_string="" name="" place_type="Matrix&amp;lt;float&amp;gt;" radius="20" sx="0" sy="0" x="-564" y="-205"&gt;&lt;code&gt;	Matrix&amp;lt;float&amp;gt; matrix(param::width(), param::height());
	for (unsigned int i = 0; i &amp;lt; param::width(); i++) {
		for (unsigned int j = 0; j &amp;lt; param::height(); j++) {
			matrix.set(i, j, 2.0);
		}
	}
	place.add(matrix);
&lt;/code&gt;&lt;/place&gt;&lt;transition guard="" id="104" name="divide" sx="70" sy="35" x="-333" y="-207"&gt;&lt;code&gt;	unsigned int x_overlay = var.mask.get_width() / 2;
	unsigned int y_overlay = var.mask.get_height() / 2;

	unsigned int count = param::divide_x() * param::divide_y();	
	Matrix&amp;lt;float&amp;gt; *matrices = var.matrix.divide(
		param::divide_x(), param::divide_y(),
		x_overlay, y_overlay);
		
	for (unsigned int i = 0; i &amp;lt; count; i++) {
		var.targets.push_back(i);
		var.block.add(matrices[i]);
	}		
	
&lt;/code&gt;&lt;/transition&gt;&lt;place id="107" init_string="" name="" place_type="Matrix&amp;lt;float&amp;gt;" radius="20" sx="0" sy="0" x="-84" y="-206" /&gt;&lt;place id="109" init_string="" name="convolution mask" place_type="Matrix&amp;lt;float&amp;gt;" radius="20" sx="73" sy="0" x="-572" y="-70"&gt;&lt;code&gt;	int mask_width = 3, mask_height = 3;
	float m[] = {
		0.0, 1.0, 0.0,
		1.0, 0.0, 1.0,
		0.0, 1.0, 0.0,
	};
	
	Matrix&amp;lt;float&amp;gt; mask(mask_width, mask_height, m);
	place.add(mask);
&lt;/code&gt;&lt;/place&gt;&lt;area id="106" init-expr="[0]" name="" sx="165.0" sy="76.0" x="-599.5" y="-238.0" /&gt;&lt;area id="112" init-expr="ca::range(0, ctx.process_count())" name="" sx="204.0" sy="81.0" x="-600.5" y="-115.0" /&gt;&lt;/net&gt;&lt;/project&gt;</description><net id="101" name="Main"><place id="102" init-expr="" name="" type="Matrix&lt;float&gt;"><code>	Matrix&lt;float&gt; matrix(param::width(), param::height());
	for (unsigned int i = 0; i &lt; param::width(); i++) {
		for (unsigned int j = 0; j &lt; param::height(); j++) {
			matrix.set(i, j, 2.0);
		}
	}
	place.add(matrix);
</code></place><place id="107" init-expr="" name="" type="Matrix&lt;float&gt;" /><place id="109" init-expr="" name="convolution mask" type="Matrix&lt;float&gt;"><code>	int mask_width = 3, mask_height = 3;
	float m[] = {
		0.0, 1.0, 0.0,
		1.0, 0.0, 1.0,
		0.0, 1.0, 0.0,
	};
	
	Matrix&lt;float&gt; mask(mask_width, mask_height, m);
	place.add(mask);
</code></place><transition guard="" id="104" name="divide"><code>	unsigned int x_overlay = var.mask.get_width() / 2;
	unsigned int y_overlay = var.mask.get_height() / 2;

	unsigned int count = param::divide_x() * param::divide_y();	
	Matrix&lt;float&gt; *matrices = var.matrix.divide(
		param::divide_x(), param::divide_y(),
		x_overlay, y_overlay);
		
	for (unsigned int i = 0; i &lt; count; i++) {
		var.targets.push_back(i);
		var.block.add(matrices[i]);
	}		
	
</code><edge-in expr="matrix" id="105" place-id="102" /><edge-in expr="mask" id="114" place-id="109" /><edge-out expr="[bulk, multicast] block @ targets" id="108" place-id="107" /><edge-out expr="mask" id="114" place-id="109" /></transition><area id="106" init-expr="[0]" name=""><place id="102" /></area><area id="112" init-expr="ca::range(0, ctx.process_count())" name=""><place id="109" /></area></net></project>