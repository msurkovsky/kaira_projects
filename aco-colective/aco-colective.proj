<project library-octave="True" library-rpc="False" target_env="C++"><configuration><parameter default="10" description="number of ants" name="Ants" policy="mandatory" type="int" /><parameter default="5" description="number of generation" name="Generation" policy="mandatory" type="int" /><build-option name="LIBS" /><build-option name="OTHER_FILES">arg/utils/cTimer.cpp
arg/utils/cRandom.cpp
arg/utils/cCLParser.cpp
arg/core/cDebuggable.cpp
aco/cAnt.cpp
aco/cAntColony.cpp
aco/cAntFactory.cpp
aco/tsp/cTspAnt.cpp
aco/tsp/cTspAntFactory.cpp</build-option><build-option name="CFLAGS">-O2 -I /home/martin/projects/kaira_projects/aco-colective</build-option><head-code>#include "arg/utils/cRandom.h"
#include "arg/utils/cCLParser.h"

#include "aco/cAntColony.h"
#include "aco/tsp/cTspAntFactory.h"

#include &lt;string&gt;
#include &lt;sstream&gt;

template&lt;class A, class B&gt;
class Couple {

	A first;
	B second;
	
	public:
		Couple&lt;A, B&gt; () { }
		Couple&lt;A, B&gt; (A first, B second) : first(first), second(second) { }
		
		Couple&lt;A, B&gt; (const Couple&lt;A, B&gt; &amp;t) {
			first = t.get_first();
			second = t.get_second();
		}
		
		Couple&lt;A, B&gt;&amp; operator= (const Couple&lt;A, B&gt; &amp;t) {
			if (this != &amp;t) {
				first = t.get_first();
				second = t.get_second();
			}
			return *this;
		}
		
		std::string token_name() const {
			std::stringstream ss;
			ss &lt;&lt; "(" &lt;&lt; first &lt;&lt; ", " &lt;&lt; second &lt;&lt; ")";
			return ss.str();
		}
		
		void pack(ca::Packer &amp;p) const {
			p &lt;&lt; first &lt;&lt; second;
		}
		
		void unpack(ca::Unpacker &amp;up) {
			up &gt;&gt; first &gt;&gt; second;
		}
		
		A get_first() const {
			return first;
		}
		
		B get_second() const {
			return second;
		}
};

struct AntColony {	
	cAntColony *colony;
	
	AntColony() { colony = NULL; }
	AntColony(cAntColony *colony) { this-&gt;colony = colony; }
	
	std::string token_name() const {
		return "AntColony";
	}
	
	void pack(ca::Packer &amp;p) const {
		if (colony != NULL) {
			colony-&gt;pack(p);
		}
	}
	
	void unpack(ca::Unpacker &amp;up) {
		printf("unpacker - AntColony - not implemented!\n");
	}
};

struct Trail {
	
	unsigned long *array;
	unsigned int length;
	
	double cost;

	Trail(unsigned int length=0) {
		this-&gt;length = length;
		array = new unsigned long[length];
		
		cost = -1;
	}

	Trail(const unsigned long *data, unsigned int length, double cost) {
		this-&gt;cost = cost;
		this-&gt;length = length;
		array = new unsigned long[length];
		memcpy(array, data, length * sizeof(unsigned long));
	}

	Trail(const Trail &amp;c) {
		length = c.length;
		array = new unsigned long[length];
		memcpy(array, c.array, length * sizeof(unsigned long));
		
		cost = c.cost;
	}

	~Trail() {
		delete [] array;
	}

	Trail &amp; operator= (const Trail &amp; c) {
        	if (this != &amp;c)
		{
			length = c.length;
			array = new unsigned long[length];
			memcpy(array, c.array, length * sizeof(unsigned long));
			cost = c.cost;
        	}
        	return *this;
	}
	
	unsigned long &amp; operator[] (unsigned int index) {
		return array[index];
	}
	
	std::string token_name() const {
		std::stringstream ss;
		ss &lt;&lt; "cost: " &lt;&lt; cost;
		return ss.str();
	}
	
	void pack(ca::Packer &amp;packer) const {
		packer &lt;&lt; length;
		packer.pack_data(array, length * sizeof(unsigned long));
		packer &lt;&lt; cost;
	}
	
	void unpack(ca::Unpacker &amp;unpacker) {
		unpacker &gt;&gt; length;
		array = new unsigned long[length];
		unpacker.unpack_data(array, length * sizeof(unsigned long));
		unpacker &gt;&gt; cost;
	}
};

double traceCost(Trail &amp;t) {
	return t.cost;
}</head-code></configuration><net id="0" name="Main"><area id="102" sx="627" sy="311" x="138" y="181"><init x="138" y="166">ca::range(0, ctx.process_count())</init></area><place id="103" label-x="230" label-y="222" name="" radius="21" sx="0" sy="0" x="230" y="222"><place-type x="247" y="239">AntColony</place-type><init x="247" y="192" /><code>	
	arg::cRandom::Init();
	
	const bool debug = false;//cl.Boolean("d") || cl.Boolean("-debug");
	const bool minimize = true;//cl.Boolean("minimize");
	const bool verbose = true;//cl.Boolean("v");
	const unsigned int gen = param::Generation();//cl.Integer("gen", 10);

	cTspAntFactory *factory = new cTspAntFactory("eil51.tsp");

	factory-&gt;Debug(debug);
	factory-&gt;Power(0);

	cAntColony *aco = new cAntColony(factory, param::Ants());
	aco-&gt;Rho(0.01);
	aco-&gt;Alpha(1);
	aco-&gt;Beta(1);
	aco-&gt;RoundBestBoost(1);
	aco-&gt;GlobalBestBoost(10);
	aco-&gt;MaxMin(0);
	aco-&gt;Minimize(minimize);
	aco-&gt;AcoType(cAntColony::ACO_ELITIST_ANT_SYSTEM_GLOBAL | cAntColony::ACO_ELITIST_ANT_SYSTEM_ROUND);
	aco-&gt;Debug(debug);
	aco-&gt;StartExecution();
	
	//TrailLength = aco-&gt;GetAnt(0)-&gt;GraphDim();
	
	//tokens.push_back(AntColony(aco));
	place.add(AntColony(aco));
</code><trace trace-tokens="False" /></place><place id="105" label-x="224" label-y="342" name="Counter" radius="22" sx="17" sy="0" x="224" y="342"><place-type x="258" y="361">int</place-type><init x="257" y="311">[0]</init><trace trace-tokens="False" /></place><place id="338" label-x="668" label-y="357" name="Ant distribution" radius="20" sx="56" sy="0" x="668" y="357"><place-type x="726" y="378">Trail</place-type><init x="685" y="327" /><trace trace-tokens="False" /></place><place id="148" label-x="302" label-y="530" name="" radius="21" sx="0" sy="0" x="302" y="530"><place-type x="319" y="547">std::vector&lt;Trail&gt;</place-type><init x="319" y="500" /><trace trace-tokens="False" /></place><place id="152" label-x="462" label-y="410" name="Best trail" radius="21" sx="21" sy="0" x="428" y="435"><place-type x="468" y="452">Trail</place-type><init x="445" y="405" /><code>	Trail t(NULL, 0, -1);
	place.add(t);
</code><trace trace-tokens="True"><function name="traceCost" return-type="double" /></trace></place><place id="348" label-x="433" label-y="98" name="" radius="20" sx="0" sy="0" x="433" y="98"><place-type x="450" y="115">Couple&lt;int, int&gt;</place-type><init x="450" y="68" /><trace trace-tokens="False" /></place><place id="354" label-x="145" label-y="98" name="" radius="20" sx="0" sy="0" x="145" y="98"><place-type x="162" y="115">std::vector&lt;int&gt;</place-type><init x="162" y="68" /><trace trace-tokens="False" /></place><place id="368" label-x="146" label-y="4" name="" radius="20" sx="0" sy="0" x="146" y="4"><place-type x="163" y="21">int</place-type><init x="163" y="-26" /><trace trace-tokens="False" /></place><transition clock="False" collective="True" id="112" label-x="227" label-y="434" name="Send Result" priority="10" sx="86" sy="42" x="192" y="416"><guard x="192" y="396" /><code>	delete var.colony.colony;
</code><root x="218" y="462">0</root></transition><transition clock="False" collective="False" id="147" label-x="537" label-y="547" name="Write result" priority="" sx="94" sy="40" x="438" y="510"><guard x="438" y="490" /><code>	Trail bestTrail = var.bests[0];

	for (int i = 1; i &lt; var.bests.size(); i++) {
		if (bestTrail.cost &gt; var.bests[i].cost) {
			bestTrail = var.bests[i];
		}
	}
	
	printf("The best trail with length %5.2f is through cities [", bestTrail.cost);
	for(unsigned int i = 0 ; i &lt; bestTrail.length - 1 ; i++){
		printf(" %ld,", bestTrail[i]);
	}
	printf(" %ld ]\n", bestTrail[bestTrail.length - 1]);

	ctx.quit();
</code></transition><transition clock="False" collective="False" id="135" label-x="432" label-y="294" name="Compute" priority="" sx="82" sy="42" x="397" y="276"><guard x="404" y="259">gen &lt; param::Generation()</guard><code>	ca::Token&lt;Trail&gt; *t = var.neighbor_best.begin();
	while (t != NULL) {
		if (t-&gt;value.cost &lt; var.best.cost || var.best.cost == -1) {
			// better neighbore
			var.best = t-&gt;value;
		}
		t = var.neighbor_best.next(t);
	}
	
	if (var.best.cost != -1 &amp;&amp; var.best.cost &lt; var.colony.colony-&gt;BestAntPtr(false)-&gt;Fitness()) {
		// set better trail to colony
		var.colony.colony-&gt;SetBestAntTrail(var.best.array, var.best.cost);
	}
	
	// new execution of colony
	var.colony.colony-&gt;Execution();
	
	// is it new result better?
	double fitness = var.colony.colony-&gt;BestAntPtr(true)-&gt;Fitness();
	if (fitness &lt; var.best.cost || var.best.cost == -1) {
		const arg::cArrayConst&lt;unsigned long&gt; &amp;trailAnt = var.colony.colony-&gt;BestAntPtr(false)-&gt;Trail();
		var.best = Trail(trailAnt.get_array(), trailAnt.Count(), fitness);
		// send copy
		var.sent_best = var.best;
	}
	
	//var.counter_source = Couple&lt;int, int&gt;(var.gen+1, var.process);
</code></transition><transition clock="False" collective="False" id="350" label-x="272" label-y="98" name="" priority="" sx="70" sy="36" x="237" y="80"><guard x="237" y="60" /><code>	var.data = std::vector&lt;int&gt;(ctx.process_count());
	ca::Token&lt;Couple&lt;int, int&gt; &gt; *c = var.counters.begin();
	while (c != NULL) {
		Couple&lt;int, int&gt; &amp;couple = c-&gt;value;
		var.data[couple.get_second()] = couple.get_first();
		c = var.counters.next(c);
	}
</code></transition><transition clock="False" collective="True" id="357" label-x="59" label-y="199" name="" priority="" sx="70" sy="36" x="24" y="181"><guard x="24" y="161" /><root x="15" y="226">0</root></transition><edge from_item="105" id="314" to_item="112"><inscription x="235.0" y="378.0">param::Generation()</inscription></edge><edge from_item="103" id="335" to_item="112"><inscription x="155.0" y="264.0">colony</inscription><point x="150" y="222" /><point x="150" y="438" /></edge><edge from_item="338" id="340" to_item="135"><inscription x="543.0" y="282.0">[bulk] neighbor_best</inscription><point x="696" y="298" /></edge><edge from_item="135" id="339" to_item="338"><inscription x="464.0" y="330.0">sent_best @ (ctx.process_id() + 1) %
                     ctx.process_count()</inscription><point x="461" y="357" /></edge><edge from_item="105" id="213" to_item="135"><inscription x="264.0" y="282.0">[svar(process)] gen</inscription><point x="230" y="299" /></edge><edge bidirectional="true" from_item="135" id="139" to_item="103"><inscription x="269.0" y="205.0">colony</inscription><point x="309" y="221" /></edge><edge from_item="148" id="150" to_item="147"><inscription x="363.0" y="512.0">bests</inscription></edge><edge from_item="152" id="174" to_item="112"><inscription x="342.0" y="417.0">best</inscription></edge><edge bidirectional="true" from_item="135" id="334" to_item="152"><inscription x="448.0" y="368.0">best</inscription></edge><edge from_item="112" id="182" to_item="148"><inscription x="311.0" y="473.0">[gather] best</inscription><point x="301" y="474" /></edge><edge from_item="135" id="349" to_item="348"><inscription x="444.0" y="189.0">Couple&lt;int, int&gt;(gen+1, process) @ 0</inscription></edge><edge from_item="348" id="351" to_item="350"><inscription x="339.0" y="65.0">[bulk, guard(size == ctx.process_count())] counters</inscription></edge><edge from_item="350" id="355" to_item="354"><inscription x="197.0" y="80.0">data</inscription></edge><edge from_item="354" id="358" to_item="357"><inscription x="70.0" y="134.0">[root] data</inscription><point x="58" y="97" /></edge><edge from_item="357" id="359" to_item="105"><inscription x="63.0" y="271.0">[scatter] data</inscription><point x="59" y="343" /></edge><edge from_item="350" id="369" to_item="368"><inscription x="181.0" y="-16.0">[multicast] 1 @ ca::range(1, ctx.process_count())</inscription><point x="270" y="4" /></edge><edge from_item="368" id="370" to_item="357"><inscription x="-26" y="-17">[if (ctx.process_id() != 0)] a</inscription><point x="-12" y="3" /><point x="-9" y="201" /></edge></net></project>